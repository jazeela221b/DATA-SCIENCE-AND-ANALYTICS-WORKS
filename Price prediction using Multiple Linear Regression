{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Prediction: Car Prices Using Multivariate Linear Regression\n----------\n\n#### Problem Statement\n-----------\nA new car manufacturer is looking to set up business in the US Market. They need to know the factors on which the pricing of a car depends on to take on their competition in the market. The company wants to know the variables the price depends on and to what extent does the variables explain the price of a car\n#### Business Goal\n----------\nWe need to build a model for the price of a car as a function of explanatory variables. ","metadata":{}},{"cell_type":"markdown","source":"### Import libraries","metadata":{}},{"cell_type":"code","source":"#importing important libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:36.294799Z","iopub.execute_input":"2022-06-01T14:48:36.297161Z","iopub.status.idle":"2022-06-01T14:48:36.958064Z","shell.execute_reply.started":"2022-06-01T14:48:36.297017Z","shell.execute_reply":"2022-06-01T14:48:36.956986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Reading and Understanding the Data","metadata":{}},{"cell_type":"code","source":"# setting the file path.\ncar_df = pd.read_csv('../input/car-price-prediction-dataset/CarPrice_Assignment.csv')\ncar_df.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:39.510121Z","iopub.execute_input":"2022-06-01T14:48:39.510555Z","iopub.status.idle":"2022-06-01T14:48:39.567297Z","shell.execute_reply.started":"2022-06-01T14:48:39.510519Z","shell.execute_reply":"2022-06-01T14:48:39.566376Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Understanding the dataframe\n# shape of the data\ncar_df.shape","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:42.103115Z","iopub.execute_input":"2022-06-01T14:48:42.104233Z","iopub.status.idle":"2022-06-01T14:48:42.110348Z","shell.execute_reply.started":"2022-06-01T14:48:42.10418Z","shell.execute_reply":"2022-06-01T14:48:42.109651Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# information of the data\ncar_df.info()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:42.571026Z","iopub.execute_input":"2022-06-01T14:48:42.57209Z","iopub.status.idle":"2022-06-01T14:48:42.599021Z","shell.execute_reply.started":"2022-06-01T14:48:42.572012Z","shell.execute_reply":"2022-06-01T14:48:42.597888Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# description of the data\ncar_df.describe()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:43.877938Z","iopub.execute_input":"2022-06-01T14:48:43.878555Z","iopub.status.idle":"2022-06-01T14:48:43.936936Z","shell.execute_reply.started":"2022-06-01T14:48:43.878522Z","shell.execute_reply":"2022-06-01T14:48:43.936069Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#we can see many variables which are categorical---feature selection will be required\n#check if there are any missing values\ncar_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:46.146742Z","iopub.execute_input":"2022-06-01T14:48:46.147131Z","iopub.status.idle":"2022-06-01T14:48:46.156741Z","shell.execute_reply.started":"2022-06-01T14:48:46.1471Z","shell.execute_reply":"2022-06-01T14:48:46.156017Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.describe() #description of data","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:46.765214Z","iopub.execute_input":"2022-06-01T14:48:46.7657Z","iopub.status.idle":"2022-06-01T14:48:46.822355Z","shell.execute_reply.started":"2022-06-01T14:48:46.765659Z","shell.execute_reply":"2022-06-01T14:48:46.821486Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Processing the data-Cleaning","metadata":{}},{"cell_type":"code","source":"#drop car_ID using basic common sense\ncar_df=car_df.drop('car_ID',axis=1)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:50.874621Z","iopub.execute_input":"2022-06-01T14:48:50.875021Z","iopub.status.idle":"2022-06-01T14:48:50.881205Z","shell.execute_reply.started":"2022-06-01T14:48:50.874991Z","shell.execute_reply":"2022-06-01T14:48:50.880155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:52.918436Z","iopub.execute_input":"2022-06-01T14:48:52.919179Z","iopub.status.idle":"2022-06-01T14:48:52.948456Z","shell.execute_reply.started":"2022-06-01T14:48:52.919132Z","shell.execute_reply":"2022-06-01T14:48:52.947511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# just required only company name.take only company name from the df and remove the car name from it\n\ncar_df['CarName']=car_df['CarName'].apply(lambda name: name.split()[0])\n#EXAMPLE\nname = \"Thomas Winter\"\nLastName = name.split()[1]\nLastName","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:53.450838Z","iopub.execute_input":"2022-06-01T14:48:53.451226Z","iopub.status.idle":"2022-06-01T14:48:53.460575Z","shell.execute_reply.started":"2022-06-01T14:48:53.451193Z","shell.execute_reply":"2022-06-01T14:48:53.459561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#rename the carname to Company\ncar_df.rename(index=str,columns={'CarName':'Company'},inplace=True)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:54.279396Z","iopub.execute_input":"2022-06-01T14:48:54.279805Z","iopub.status.idle":"2022-06-01T14:48:54.286122Z","shell.execute_reply.started":"2022-06-01T14:48:54.279772Z","shell.execute_reply":"2022-06-01T14:48:54.284808Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#citimpg and highwaympg can be combined and take the average\ncar_df['avg_mpg']=(car_df['citympg']+car_df['highwaympg'])/2","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:56.477919Z","iopub.execute_input":"2022-06-01T14:48:56.4791Z","iopub.status.idle":"2022-06-01T14:48:56.48621Z","shell.execute_reply.started":"2022-06-01T14:48:56.479048Z","shell.execute_reply":"2022-06-01T14:48:56.485181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#drop citympg and highwaympg\ncar_df=car_df.drop(['citympg','highwaympg'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:48:59.254245Z","iopub.execute_input":"2022-06-01T14:48:59.254766Z","iopub.status.idle":"2022-06-01T14:48:59.262564Z","shell.execute_reply.started":"2022-06-01T14:48:59.254722Z","shell.execute_reply":"2022-06-01T14:48:59.261363Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#sympoling-make it string:categorical variable,not to be continous\ncar_df.symboling=car_df.symboling.astype(str)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:00.084954Z","iopub.execute_input":"2022-06-01T14:49:00.085379Z","iopub.status.idle":"2022-06-01T14:49:00.091662Z","shell.execute_reply.started":"2022-06-01T14:49:00.085346Z","shell.execute_reply":"2022-06-01T14:49:00.090839Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:00.933696Z","iopub.execute_input":"2022-06-01T14:49:00.934533Z","iopub.status.idle":"2022-06-01T14:49:00.9649Z","shell.execute_reply.started":"2022-06-01T14:49:00.934488Z","shell.execute_reply":"2022-06-01T14:49:00.963958Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#the companies present in the dataset\ncar_df.Company.unique()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:03.416855Z","iopub.execute_input":"2022-06-01T14:49:03.417556Z","iopub.status.idle":"2022-06-01T14:49:03.42383Z","shell.execute_reply.started":"2022-06-01T14:49:03.417521Z","shell.execute_reply":"2022-06-01T14:49:03.422887Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#misspelled/repeated company:correction...toyota-toyouta,volkswagen-vokswagen,vw etc\n\ncar_df.Company.replace('maxda','mazda',inplace=True)\ncar_df.Company.replace('Nissan','nissan',inplace=True)\ncar_df.Company.replace('porcshce','porsche',inplace=True)\ncar_df.Company.replace('toyouta','toyota',inplace=True)\ncar_df.Company.replace('vokswagen','volkswagen',inplace=True)\ncar_df.Company.replace('vw','volkswagen',inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:04.092113Z","iopub.execute_input":"2022-06-01T14:49:04.092536Z","iopub.status.idle":"2022-06-01T14:49:04.10162Z","shell.execute_reply.started":"2022-06-01T14:49:04.0925Z","shell.execute_reply":"2022-06-01T14:49:04.100582Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.Company.unique()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:04.981873Z","iopub.execute_input":"2022-06-01T14:49:04.98232Z","iopub.status.idle":"2022-06-01T14:49:04.988939Z","shell.execute_reply.started":"2022-06-01T14:49:04.98228Z","shell.execute_reply":"2022-06-01T14:49:04.987972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculating the Missing Values % contribution in DF\n\nnull_df = car_df.isna().mean().round(4) * 100\n\nnull_df.sort_values(ascending=False).head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:07.077021Z","iopub.execute_input":"2022-06-01T14:49:07.077504Z","iopub.status.idle":"2022-06-01T14:49:07.088319Z","shell.execute_reply.started":"2022-06-01T14:49:07.077462Z","shell.execute_reply":"2022-06-01T14:49:07.08767Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# checking for duplicates\n\ncar_df.loc[car_df.duplicated()]","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:07.757955Z","iopub.execute_input":"2022-06-01T14:49:07.758397Z","iopub.status.idle":"2022-06-01T14:49:07.780322Z","shell.execute_reply.started":"2022-06-01T14:49:07.75836Z","shell.execute_reply":"2022-06-01T14:49:07.779473Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Datatypes\ncar_df.dtypes","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:09.978134Z","iopub.execute_input":"2022-06-01T14:49:09.978551Z","iopub.status.idle":"2022-06-01T14:49:09.986667Z","shell.execute_reply.started":"2022-06-01T14:49:09.97852Z","shell.execute_reply":"2022-06-01T14:49:09.985578Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Outlier Analysis of PRICE [target variable] for maximum amount of Inconsistency\noutliers = ['price']\nplt.rcParams['figure.figsize'] = [8,8]\nsns.boxplot(data=car_df[outliers], orient=\"v\", palette=\"Set1\" ,whis=1.5,saturation=1, width=0.7)\nplt.title(\"Outliers Variable Distribution\", fontsize = 14, fontweight = 'bold')\nplt.ylabel(\"Price Range\", fontweight = 'bold')\nplt.xlabel(\"Continuous Variable\", fontweight = 'bold')\ncar_df.shape","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:10.545637Z","iopub.execute_input":"2022-06-01T14:49:10.546394Z","iopub.status.idle":"2022-06-01T14:49:10.767884Z","shell.execute_reply.started":"2022-06-01T14:49:10.546357Z","shell.execute_reply":"2022-06-01T14:49:10.766746Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* An outlier is a data point that is noticeably different from the rest. They represent errors in measurement, bad data collection, or simply show variables not considered when collecting the data.\n* Here,there are some price ranges above 36000 which can be termed as outliers so we need to use standarization scaling.","metadata":{}},{"cell_type":"code","source":"# partitioning of Numerical and Categorical Variables\ncategorical = car_df.select_dtypes(include=['object']).columns\nnumerical = car_df.select_dtypes(exclude=['object']).columns\ncatdf = car_df[categorical]\nnumdf = car_df[numerical]","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:14.065175Z","iopub.execute_input":"2022-06-01T14:49:14.065596Z","iopub.status.idle":"2022-06-01T14:49:14.076351Z","shell.execute_reply.started":"2022-06-01T14:49:14.065564Z","shell.execute_reply":"2022-06-01T14:49:14.075223Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.head()","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:49:16.1308Z","iopub.execute_input":"2022-06-01T14:49:16.131519Z","iopub.status.idle":"2022-06-01T14:49:16.160749Z","shell.execute_reply.started":"2022-06-01T14:49:16.131482Z","shell.execute_reply":"2022-06-01T14:49:16.159648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df[categorical].head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:16.830498Z","iopub.execute_input":"2022-06-01T14:49:16.831149Z","iopub.status.idle":"2022-06-01T14:49:16.848685Z","shell.execute_reply.started":"2022-06-01T14:49:16.831101Z","shell.execute_reply":"2022-06-01T14:49:16.847597Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"catdf.head()","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:49:18.904043Z","iopub.execute_input":"2022-06-01T14:49:18.904445Z","iopub.status.idle":"2022-06-01T14:49:18.921402Z","shell.execute_reply.started":"2022-06-01T14:49:18.904411Z","shell.execute_reply":"2022-06-01T14:49:18.920425Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df[numerical].head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:20.510306Z","iopub.execute_input":"2022-06-01T14:49:20.510869Z","iopub.status.idle":"2022-06-01T14:49:20.533692Z","shell.execute_reply.started":"2022-06-01T14:49:20.510829Z","shell.execute_reply":"2022-06-01T14:49:20.532331Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"numdf.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:49:22.531534Z","iopub.execute_input":"2022-06-01T14:49:22.531945Z","iopub.status.idle":"2022-06-01T14:49:22.552966Z","shell.execute_reply.started":"2022-06-01T14:49:22.531911Z","shell.execute_reply":"2022-06-01T14:49:22.551889Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Data Visualisation","metadata":{}},{"cell_type":"markdown","source":"### Pairplot\n#### Numerical values ","metadata":{}},{"cell_type":"code","source":"ax = sns.pairplot(numdf)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:49:26.502667Z","iopub.execute_input":"2022-06-01T14:49:26.503072Z","iopub.status.idle":"2022-06-01T14:49:57.911564Z","shell.execute_reply.started":"2022-06-01T14:49:26.503039Z","shell.execute_reply":"2022-06-01T14:49:57.909757Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* When compared with price,we can see price doesn't have much correlation with carheight.\n* Price has a negative correlation with avg_mpg and positive correlation with carwdidth,carlength,curbweight,enginesize and horsepower.","metadata":{}},{"cell_type":"code","source":"#fitting numerical values with price\nfig,axes = plt.subplots(4,4,figsize=(18,15))\nfor seg,col in enumerate(numdf[:len(numdf)-1]):\n    \n    x,y = seg//4,seg%4\n    sns.regplot(x=col, y='price' ,data=car_df,ax=axes[x][y],color='b')","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:50:49.719393Z","iopub.execute_input":"2022-06-01T14:50:49.719795Z","iopub.status.idle":"2022-06-01T14:50:53.177818Z","shell.execute_reply.started":"2022-06-01T14:50:49.719764Z","shell.execute_reply":"2022-06-01T14:50:53.176951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Correlation matrix\nnumdf.corr()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:50:58.968989Z","iopub.execute_input":"2022-06-01T14:50:58.969421Z","iopub.status.idle":"2022-06-01T14:50:58.995524Z","shell.execute_reply.started":"2022-06-01T14:50:58.969375Z","shell.execute_reply":"2022-06-01T14:50:58.994664Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#heatmap\nsns.heatmap(numdf.corr())","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:02.647999Z","iopub.execute_input":"2022-06-01T14:51:02.648401Z","iopub.status.idle":"2022-06-01T14:51:03.045756Z","shell.execute_reply.started":"2022-06-01T14:51:02.64837Z","shell.execute_reply":"2022-06-01T14:51:03.04464Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* wheelbase has high positive correlation with carlength,carwidth and curbweight\n* carlength has high postive correlation with curbweight and negative correlation with highwaympg\n* carwidth has high postive correlation with curbweight and engine size\n* enginesize has high positive correlation with horsepower\n* curbweight has high positive correlation with engine size and horse power and negative correlation with highwaympg\n* horsepower has negative correlation with citympg and highwaympg\n* citympg and highwaympg are highly correlated","metadata":{}},{"cell_type":"code","source":"#Price distribution of cars\nsns.distplot(car_df.price,kde=True)\nplt.title('Price Distribution Plot of Price')","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:51:11.097117Z","iopub.execute_input":"2022-06-01T14:51:11.097738Z","iopub.status.idle":"2022-06-01T14:51:11.306677Z","shell.execute_reply.started":"2022-06-01T14:51:11.097702Z","shell.execute_reply":"2022-06-01T14:51:11.305555Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Plot is right skewed \n* Right skewed means that the smaller values occur in the data with higher frequency and the larger values occur with comparatively lesser frequency\n* here, there are more cheaper cars in the dataset than expensive cars and maximum number of cars are in range of 20000","metadata":{}},{"cell_type":"code","source":"#Visualising car names\ndf=pd.DataFrame(car_df['Company'].value_counts()).reset_index().rename(columns={'index':'car_name','Company': 'count'})\nplot = sns.barplot(y='car_name',x='count',data=df,color='#13d2f2')","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:15.23829Z","iopub.execute_input":"2022-06-01T14:51:15.238697Z","iopub.status.idle":"2022-06-01T14:51:15.526689Z","shell.execute_reply.started":"2022-06-01T14:51:15.238666Z","shell.execute_reply":"2022-06-01T14:51:15.525533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* The most suitable and least suitable cars are toyota and mercury respectively.\n* we can visualise many other numerical features too using these libraries.","metadata":{}},{"cell_type":"markdown","source":"### Boxplot\n#### Categorical values","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(30, 55))\nplt.subplot(11,1,1)\nsns.boxplot(x = 'symboling', y = 'price', data = car_df)\nplt.subplot(11,1,2)\nsns.boxplot(x = 'Company', y = 'price', data = car_df)\nplt.subplot(11,1,3)\nsns.boxplot(x = 'fueltype', y = 'price', data = car_df)\nplt.subplot(11,1,4)\nsns.boxplot(x = 'doornumber', y = 'price', data = car_df)\nplt.subplot(11,1,5)\nsns.boxplot(x = 'aspiration', y = 'price', data = car_df)\nplt.subplot(11,1,6)\nsns.boxplot(x = 'carbody', y = 'price', data = car_df)\nplt.subplot(11,1,7)\nsns.boxplot(x = 'enginelocation', y = 'price', data = car_df)\nplt.subplot(11,1,8)\nsns.boxplot(x = 'drivewheel', y = 'price', data = car_df)\nplt.subplot(11,1,9)\nsns.boxplot(x = 'enginetype', y = 'price', data = car_df)\nplt.subplot(11,1,10)\nsns.boxplot(x = 'cylindernumber', y = 'price', data = car_df)\nplt.subplot(11,1,11)\nsns.boxplot(x = 'fuelsystem', y = 'price', data = car_df)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:21.941782Z","iopub.execute_input":"2022-06-01T14:51:21.942584Z","iopub.status.idle":"2022-06-01T14:51:24.381776Z","shell.execute_reply.started":"2022-06-01T14:51:21.942539Z","shell.execute_reply":"2022-06-01T14:51:24.381072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* Price of -1 symboling is higher in compare to others\n* Price of diesel is much higher than of gas , also there are some outliers in gas vehicles.so the cars with fueltype as diesel are comparatively expensive than the cars with fueltype as gas.\n* DoorNumber isn't affecting the price much.there is slight difference in distributions of cars having two doors vs cars having 4 doors\n* Price of turbo is higher in compared to std , although there are some outliers in std price\n* Price of hardtop is very high compare to others and most of the carbodies are relatively cheaper as compared to convertible carbody.\n* The cars with rear enginelocation are way expensive than cars with front enginelocation.\n* Price range of rwd drivewheel cars is quite high compare to others.\n* Price range of ohcv engine cars are quite high in compare to others.\n* according to cylinder number\n    * The price of car is directly proportional to no. of cylinders in most    cases.\n    * There is only 1 car having cylinder number 3 and 12 .\n    * Car having cylinder number eight has higher price range.\n* Price range are high of car having idi fuel system","metadata":{}},{"cell_type":"markdown","source":"### Data Preparation","metadata":{}},{"cell_type":"markdown","source":"#### Creation of Dummy Variables","metadata":{}},{"cell_type":"code","source":"catdf","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:51:26.948848Z","iopub.execute_input":"2022-06-01T14:51:26.949473Z","iopub.status.idle":"2022-06-01T14:51:26.970045Z","shell.execute_reply.started":"2022-06-01T14:51:26.949412Z","shell.execute_reply":"2022-06-01T14:51:26.969345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"catvalue=['Company','fueltype','aspiration','doornumber', 'carbody','drivewheel','enginelocation','enginetype','cylindernumber','fuelsystem']","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:31.976838Z","iopub.execute_input":"2022-06-01T14:51:31.977252Z","iopub.status.idle":"2022-06-01T14:51:31.981821Z","shell.execute_reply.started":"2022-06-01T14:51:31.977217Z","shell.execute_reply":"2022-06-01T14:51:31.980989Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#using get_dummies() for the categorical feature and store it in a new variable - 'dummies'\ncar_dummies = pd.get_dummies(car_df[catvalue])\ncar_dummies.shape","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:51:32.937851Z","iopub.execute_input":"2022-06-01T14:51:32.938273Z","iopub.status.idle":"2022-06-01T14:51:32.957657Z","shell.execute_reply.started":"2022-06-01T14:51:32.938223Z","shell.execute_reply":"2022-06-01T14:51:32.956216Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Add the results to the original dataframe\n\ncar_df = pd.concat([car_df,car_dummies], axis = 1)\ncar_df.shape","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:35.194523Z","iopub.execute_input":"2022-06-01T14:51:35.19495Z","iopub.status.idle":"2022-06-01T14:51:35.20452Z","shell.execute_reply.started":"2022-06-01T14:51:35.194918Z","shell.execute_reply":"2022-06-01T14:51:35.203683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Drop the original categorical variables with categorical values as dummies are already created\n\ncar_df.drop(car_df[catvalue],axis = 1, inplace = True)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:35.999174Z","iopub.execute_input":"2022-06-01T14:51:36.000166Z","iopub.status.idle":"2022-06-01T14:51:36.00796Z","shell.execute_reply.started":"2022-06-01T14:51:36.000122Z","shell.execute_reply":"2022-06-01T14:51:36.007044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.shape","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:51:37.070218Z","iopub.execute_input":"2022-06-01T14:51:37.070837Z","iopub.status.idle":"2022-06-01T14:51:37.076228Z","shell.execute_reply.started":"2022-06-01T14:51:37.070801Z","shell.execute_reply":"2022-06-01T14:51:37.075492Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:39.543063Z","iopub.execute_input":"2022-06-01T14:51:39.543698Z","iopub.status.idle":"2022-06-01T14:51:39.570547Z","shell.execute_reply.started":"2022-06-01T14:51:39.543646Z","shell.execute_reply":"2022-06-01T14:51:39.569557Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:51:41.570924Z","iopub.execute_input":"2022-06-01T14:51:41.571333Z","iopub.status.idle":"2022-06-01T14:51:41.606676Z","shell.execute_reply.started":"2022-06-01T14:51:41.571301Z","shell.execute_reply":"2022-06-01T14:51:41.60561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.info()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:42.305872Z","iopub.execute_input":"2022-06-01T14:51:42.306994Z","iopub.status.idle":"2022-06-01T14:51:42.327431Z","shell.execute_reply.started":"2022-06-01T14:51:42.306939Z","shell.execute_reply":"2022-06-01T14:51:42.326564Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Feature Scaling","metadata":{}},{"cell_type":"code","source":"# rescale the variables for having a comparable scale.\n# scaling the features\nfrom sklearn.preprocessing import MinMaxScaler","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:47.148492Z","iopub.execute_input":"2022-06-01T14:51:47.149051Z","iopub.status.idle":"2022-06-01T14:51:47.218164Z","shell.execute_reply.started":"2022-06-01T14:51:47.149018Z","shell.execute_reply":"2022-06-01T14:51:47.216902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"scaler = MinMaxScaler()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:47.932293Z","iopub.execute_input":"2022-06-01T14:51:47.932697Z","iopub.status.idle":"2022-06-01T14:51:47.936868Z","shell.execute_reply.started":"2022-06-01T14:51:47.932663Z","shell.execute_reply":"2022-06-01T14:51:47.935861Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"numdf","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:48.838327Z","iopub.execute_input":"2022-06-01T14:51:48.838739Z","iopub.status.idle":"2022-06-01T14:51:48.870672Z","shell.execute_reply.started":"2022-06-01T14:51:48.838707Z","shell.execute_reply":"2022-06-01T14:51:48.869743Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply scaler() to all the columns except for dummy variables\nnum_var = ['symboling','horsepower','wheelbase','curbweight', 'enginesize', 'boreratio','stroke','compressionratio','carlength','carwidth','carheight','peakrpm','avg_mpg','price']\n\ncar_df[num_var] = scaler.fit_transform(car_df[num_var])\ncar_df.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:50.917252Z","iopub.execute_input":"2022-06-01T14:51:50.917656Z","iopub.status.idle":"2022-06-01T14:51:50.954368Z","shell.execute_reply.started":"2022-06-01T14:51:50.917626Z","shell.execute_reply":"2022-06-01T14:51:50.953169Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Splitting the Data into Training and Testing Sets","metadata":{}},{"cell_type":"code","source":"car_df","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:54.112279Z","iopub.execute_input":"2022-06-01T14:51:54.112708Z","iopub.status.idle":"2022-06-01T14:51:54.143381Z","shell.execute_reply.started":"2022-06-01T14:51:54.112674Z","shell.execute_reply":"2022-06-01T14:51:54.142626Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df['price']","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:57.159033Z","iopub.execute_input":"2022-06-01T14:51:57.159477Z","iopub.status.idle":"2022-06-01T14:51:57.169408Z","shell.execute_reply.started":"2022-06-01T14:51:57.15944Z","shell.execute_reply":"2022-06-01T14:51:57.168206Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"car_df.info()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:51:57.854718Z","iopub.execute_input":"2022-06-01T14:51:57.85562Z","iopub.status.idle":"2022-06-01T14:51:57.873932Z","shell.execute_reply.started":"2022-06-01T14:51:57.855577Z","shell.execute_reply":"2022-06-01T14:51:57.87276Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Dividing into X and Y sets for the model building","metadata":{}},{"cell_type":"code","source":"#Split the data into X and Y.\n#Independent variables\nX = car_df.drop('price',axis = 1)\nX.head()","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:52:03.759199Z","iopub.execute_input":"2022-06-01T14:52:03.760106Z","iopub.status.idle":"2022-06-01T14:52:03.785702Z","shell.execute_reply.started":"2022-06-01T14:52:03.760068Z","shell.execute_reply":"2022-06-01T14:52:03.784693Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X.info()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:05.85083Z","iopub.execute_input":"2022-06-01T14:52:05.851238Z","iopub.status.idle":"2022-06-01T14:52:05.86914Z","shell.execute_reply.started":"2022-06-01T14:52:05.851205Z","shell.execute_reply":"2022-06-01T14:52:05.868321Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Dependent variable\nY = car_df.price\nY.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:06.551014Z","iopub.execute_input":"2022-06-01T14:52:06.552324Z","iopub.status.idle":"2022-06-01T14:52:06.563228Z","shell.execute_reply.started":"2022-06-01T14:52:06.552248Z","shell.execute_reply":"2022-06-01T14:52:06.562304Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Train-Test split of data.","metadata":{}},{"cell_type":"code","source":"# Importing library for splitting\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:13.39602Z","iopub.execute_input":"2022-06-01T14:52:13.396448Z","iopub.status.idle":"2022-06-01T14:52:13.46178Z","shell.execute_reply.started":"2022-06-01T14:52:13.396415Z","shell.execute_reply":"2022-06-01T14:52:13.461004Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#train-test split:from X and Y ,divide it into train and test.\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.7,test_size = 0.3, random_state=100)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:14.779115Z","iopub.execute_input":"2022-06-01T14:52:14.779881Z","iopub.status.idle":"2022-06-01T14:52:14.786093Z","shell.execute_reply.started":"2022-06-01T14:52:14.779845Z","shell.execute_reply":"2022-06-01T14:52:14.785393Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Checking correlation coeffiecients to see which variables are highly correlted\n\nplt.figure(figsize = (40,80))\nsns.heatmap(car_df.corr(), annot = True, cmap = 'PuBu')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:21.159463Z","iopub.execute_input":"2022-06-01T14:52:21.160008Z","iopub.status.idle":"2022-06-01T14:52:43.280647Z","shell.execute_reply.started":"2022-06-01T14:52:21.159968Z","shell.execute_reply":"2022-06-01T14:52:43.279462Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Building and Evaluation","metadata":{}},{"cell_type":"code","source":"#Building the first model\nimport statsmodels.api as sm\n\n# Add a constant otherwise it will be straight line from zero\nX_train_mlr = sm.add_constant(X_train)\n\n# Create a first fitted model\nmlr_1 = sm.OLS(Y_train, X_train_mlr).fit()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:43.285563Z","iopub.execute_input":"2022-06-01T14:52:43.288639Z","iopub.status.idle":"2022-06-01T14:52:44.046851Z","shell.execute_reply.started":"2022-06-01T14:52:43.288587Z","shell.execute_reply":"2022-06-01T14:52:44.045682Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mlr_1.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:44.048671Z","iopub.execute_input":"2022-06-01T14:52:44.049452Z","iopub.status.idle":"2022-06-01T14:52:44.161271Z","shell.execute_reply.started":"2022-06-01T14:52:44.049397Z","shell.execute_reply":"2022-06-01T14:52:44.160199Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Feature Selection using RFE","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_selection import RFE\nfrom sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor()\n#Init the transformer\nrfe = RFE(estimator=RandomForestRegressor(), n_features_to_select=15)\n\n#Fit to the training data\nrfe = rfe.fit(X_train_mlr, Y_train)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:44.163967Z","iopub.execute_input":"2022-06-01T14:52:44.164673Z","iopub.status.idle":"2022-06-01T14:52:58.758032Z","shell.execute_reply.started":"2022-06-01T14:52:44.164604Z","shell.execute_reply":"2022-06-01T14:52:58.757046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"list(zip(X_train.columns, rfe.support_,rfe.ranking_))","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:58.759309Z","iopub.execute_input":"2022-06-01T14:52:58.759663Z","iopub.status.idle":"2022-06-01T14:52:58.773486Z","shell.execute_reply.started":"2022-06-01T14:52:58.759632Z","shell.execute_reply":"2022-06-01T14:52:58.772418Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rfe.support_[1:]","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:58.774733Z","iopub.execute_input":"2022-06-01T14:52:58.775087Z","iopub.status.idle":"2022-06-01T14:52:58.788235Z","shell.execute_reply.started":"2022-06-01T14:52:58.775056Z","shell.execute_reply":"2022-06-01T14:52:58.787196Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = X_train.columns[rfe.support_[1:]]\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:58.78967Z","iopub.execute_input":"2022-06-01T14:52:58.790199Z","iopub.status.idle":"2022-06-01T14:52:58.802495Z","shell.execute_reply.started":"2022-06-01T14:52:58.790165Z","shell.execute_reply":"2022-06-01T14:52:58.801683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.columns[~rfe.support_[1:]]","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:58.803828Z","iopub.execute_input":"2022-06-01T14:52:58.804539Z","iopub.status.idle":"2022-06-01T14:52:58.816461Z","shell.execute_reply.started":"2022-06-01T14:52:58.804506Z","shell.execute_reply":"2022-06-01T14:52:58.815744Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"### update the model\n# Building the second model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_2 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_2.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:52:58.817548Z","iopub.execute_input":"2022-06-01T14:52:58.817985Z","iopub.status.idle":"2022-06-01T14:52:58.854983Z","shell.execute_reply.started":"2022-06-01T14:52:58.817944Z","shell.execute_reply":"2022-06-01T14:52:58.85432Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### VIF Checking","metadata":{}},{"cell_type":"code","source":"#Importing VIF\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:54:09.583037Z","iopub.execute_input":"2022-06-01T14:54:09.583493Z","iopub.status.idle":"2022-06-01T14:54:09.591115Z","shell.execute_reply.started":"2022-06-01T14:54:09.583459Z","shell.execute_reply":"2022-06-01T14:54:09.59019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:54:10.570088Z","iopub.execute_input":"2022-06-01T14:54:10.570543Z","iopub.status.idle":"2022-06-01T14:54:10.612223Z","shell.execute_reply.started":"2022-06-01T14:54:10.57051Z","shell.execute_reply":"2022-06-01T14:54:10.611319Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = col.drop('carlength', 1)\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:54:57.409706Z","iopub.execute_input":"2022-06-01T14:54:57.410113Z","iopub.status.idle":"2022-06-01T14:54:57.41742Z","shell.execute_reply.started":"2022-06-01T14:54:57.41008Z","shell.execute_reply":"2022-06-01T14:54:57.416434Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Building the third model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_3 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_3.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:55:00.492411Z","iopub.execute_input":"2022-06-01T14:55:00.493318Z","iopub.status.idle":"2022-06-01T14:55:00.526221Z","shell.execute_reply.started":"2022-06-01T14:55:00.493272Z","shell.execute_reply":"2022-06-01T14:55:00.525277Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the VIFs again\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:55:01.680536Z","iopub.execute_input":"2022-06-01T14:55:01.681492Z","iopub.status.idle":"2022-06-01T14:55:01.717673Z","shell.execute_reply.started":"2022-06-01T14:55:01.681457Z","shell.execute_reply":"2022-06-01T14:55:01.716677Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = col.drop('horsepower', 1)\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:57:00.015756Z","iopub.execute_input":"2022-06-01T14:57:00.016183Z","iopub.status.idle":"2022-06-01T14:57:00.023549Z","shell.execute_reply.started":"2022-06-01T14:57:00.016149Z","shell.execute_reply":"2022-06-01T14:57:00.022786Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Building the fourth model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_4 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_4.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:57:02.896408Z","iopub.execute_input":"2022-06-01T14:57:02.897188Z","iopub.status.idle":"2022-06-01T14:57:02.926242Z","shell.execute_reply.started":"2022-06-01T14:57:02.897143Z","shell.execute_reply":"2022-06-01T14:57:02.925497Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the VIFs again\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:57:07.876318Z","iopub.execute_input":"2022-06-01T14:57:07.876742Z","iopub.status.idle":"2022-06-01T14:57:07.914585Z","shell.execute_reply.started":"2022-06-01T14:57:07.876708Z","shell.execute_reply":"2022-06-01T14:57:07.913686Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = col.drop('wheelbase', 1)\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:57:41.464802Z","iopub.execute_input":"2022-06-01T14:57:41.465588Z","iopub.status.idle":"2022-06-01T14:57:41.473055Z","shell.execute_reply.started":"2022-06-01T14:57:41.465547Z","shell.execute_reply":"2022-06-01T14:57:41.472121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Building the fifth model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_5 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_5.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:57:43.276171Z","iopub.execute_input":"2022-06-01T14:57:43.276617Z","iopub.status.idle":"2022-06-01T14:57:43.307446Z","shell.execute_reply.started":"2022-06-01T14:57:43.276582Z","shell.execute_reply":"2022-06-01T14:57:43.306537Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the VIFs again\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:57:46.291034Z","iopub.execute_input":"2022-06-01T14:57:46.291483Z","iopub.status.idle":"2022-06-01T14:57:46.330451Z","shell.execute_reply.started":"2022-06-01T14:57:46.291447Z","shell.execute_reply":"2022-06-01T14:57:46.329338Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = col.drop('boreratio', 1)\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:58:39.846643Z","iopub.execute_input":"2022-06-01T14:58:39.847035Z","iopub.status.idle":"2022-06-01T14:58:39.854557Z","shell.execute_reply.started":"2022-06-01T14:58:39.847005Z","shell.execute_reply":"2022-06-01T14:58:39.853788Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Building the sixth model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_6 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_6.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:58:42.121116Z","iopub.execute_input":"2022-06-01T14:58:42.121564Z","iopub.status.idle":"2022-06-01T14:58:42.149487Z","shell.execute_reply.started":"2022-06-01T14:58:42.121528Z","shell.execute_reply":"2022-06-01T14:58:42.148688Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the VIFs again\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:58:44.836217Z","iopub.execute_input":"2022-06-01T14:58:44.83709Z","iopub.status.idle":"2022-06-01T14:58:44.867875Z","shell.execute_reply.started":"2022-06-01T14:58:44.837055Z","shell.execute_reply":"2022-06-01T14:58:44.86694Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = col.drop('carheight', 1)\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:59:04.993047Z","iopub.execute_input":"2022-06-01T14:59:04.993491Z","iopub.status.idle":"2022-06-01T14:59:05.000718Z","shell.execute_reply.started":"2022-06-01T14:59:04.993457Z","shell.execute_reply":"2022-06-01T14:59:04.999712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Building the seventh model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_7 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_7.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:59:07.135816Z","iopub.execute_input":"2022-06-01T14:59:07.136196Z","iopub.status.idle":"2022-06-01T14:59:07.165471Z","shell.execute_reply.started":"2022-06-01T14:59:07.136166Z","shell.execute_reply":"2022-06-01T14:59:07.164705Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the VIFs again\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:59:10.346921Z","iopub.execute_input":"2022-06-01T14:59:10.347326Z","iopub.status.idle":"2022-06-01T14:59:10.379583Z","shell.execute_reply.started":"2022-06-01T14:59:10.347287Z","shell.execute_reply":"2022-06-01T14:59:10.378445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = col.drop('avg_mpg', 1)\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:59:31.991704Z","iopub.execute_input":"2022-06-01T14:59:31.99212Z","iopub.status.idle":"2022-06-01T14:59:31.999224Z","shell.execute_reply.started":"2022-06-01T14:59:31.992087Z","shell.execute_reply":"2022-06-01T14:59:31.99834Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Building the eighth model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_8 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_8.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T14:59:38.743128Z","iopub.execute_input":"2022-06-01T14:59:38.743545Z","iopub.status.idle":"2022-06-01T14:59:38.770278Z","shell.execute_reply.started":"2022-06-01T14:59:38.743506Z","shell.execute_reply":"2022-06-01T14:59:38.769296Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the VIFs again\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2022-06-01T14:59:50.238984Z","iopub.execute_input":"2022-06-01T14:59:50.239772Z","iopub.status.idle":"2022-06-01T14:59:50.271313Z","shell.execute_reply.started":"2022-06-01T14:59:50.239735Z","shell.execute_reply":"2022-06-01T14:59:50.270353Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"col = col.drop('drivewheel_rwd', 1)\ncol","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:00:41.151026Z","iopub.execute_input":"2022-06-01T15:00:41.151437Z","iopub.status.idle":"2022-06-01T15:00:41.158833Z","shell.execute_reply.started":"2022-06-01T15:00:41.151403Z","shell.execute_reply":"2022-06-01T15:00:41.158122Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Building the ninth model\nX_train_mlr_1 = sm.add_constant(X_train[col])\nmlr_9 = sm.OLS(Y_train, X_train_mlr_1).fit()\nmlr_9.summary()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:00:44.020138Z","iopub.execute_input":"2022-06-01T15:00:44.020547Z","iopub.status.idle":"2022-06-01T15:00:44.049645Z","shell.execute_reply.started":"2022-06-01T15:00:44.020508Z","shell.execute_reply":"2022-06-01T15:00:44.048732Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the VIFs again\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:00:49.427083Z","iopub.execute_input":"2022-06-01T15:00:49.427511Z","iopub.status.idle":"2022-06-01T15:00:49.456374Z","shell.execute_reply.started":"2022-06-01T15:00:49.427476Z","shell.execute_reply":"2022-06-01T15:00:49.455461Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"here,all p values are in range (less than 0.05),so we will be making predictions in the training set","metadata":{}},{"cell_type":"markdown","source":"### Residual Analysis","metadata":{}},{"cell_type":"code","source":"#check if the error terms are normally distributed.\nY_train_price = mlr_9.predict(X_train_mlr_1)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:01:58.683403Z","iopub.execute_input":"2022-06-01T15:01:58.683818Z","iopub.status.idle":"2022-06-01T15:01:58.689405Z","shell.execute_reply.started":"2022-06-01T15:01:58.683787Z","shell.execute_reply":"2022-06-01T15:01:58.688549Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Y_train_price.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:02:02.176797Z","iopub.execute_input":"2022-06-01T15:02:02.177191Z","iopub.status.idle":"2022-06-01T15:02:02.184185Z","shell.execute_reply.started":"2022-06-01T15:02:02.177161Z","shell.execute_reply":"2022-06-01T15:02:02.183415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Plotting the histogram of the error terms\nfig = plt.figure()\nsns.distplot((Y_train - Y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)                         # X-label","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:02:03.068635Z","iopub.execute_input":"2022-06-01T15:02:03.069513Z","iopub.status.idle":"2022-06-01T15:02:03.333229Z","shell.execute_reply.started":"2022-06-01T15:02:03.069475Z","shell.execute_reply":"2022-06-01T15:02:03.332101Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Making Predictions based on Model","metadata":{}},{"cell_type":"code","source":"x_test_try = sm.add_constant(X_test[col])","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:02:07.276124Z","iopub.execute_input":"2022-06-01T15:02:07.27652Z","iopub.status.idle":"2022-06-01T15:02:07.284697Z","shell.execute_reply.started":"2022-06-01T15:02:07.27649Z","shell.execute_reply":"2022-06-01T15:02:07.283709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_prediction = mlr_9.predict(x_test_try)","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:02:08.55243Z","iopub.execute_input":"2022-06-01T15:02:08.552863Z","iopub.status.idle":"2022-06-01T15:02:08.557824Z","shell.execute_reply.started":"2022-06-01T15:02:08.552826Z","shell.execute_reply":"2022-06-01T15:02:08.556793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_prediction.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:03:20.389958Z","iopub.execute_input":"2022-06-01T15:03:20.390507Z","iopub.status.idle":"2022-06-01T15:03:20.398782Z","shell.execute_reply.started":"2022-06-01T15:03:20.390463Z","shell.execute_reply":"2022-06-01T15:03:20.39783Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Predicted Values","metadata":{}},{"cell_type":"code","source":"pred_df=pd.DataFrame({'Actual Value':Y_test,'Predicted Value':y_prediction,'Difference':Y_test-y_prediction})\npred_df.head()","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:03:25.713173Z","iopub.execute_input":"2022-06-01T15:03:25.713609Z","iopub.status.idle":"2022-06-01T15:03:25.727663Z","shell.execute_reply.started":"2022-06-01T15:03:25.713574Z","shell.execute_reply":"2022-06-01T15:03:25.726626Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Evaluation","metadata":{}},{"cell_type":"code","source":"#Checking the accuracy of the test data\nfrom sklearn.metrics import r2_score\nscore = r2_score(Y_test,y_prediction)\nscore","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:03:54.077012Z","iopub.execute_input":"2022-06-01T15:03:54.077426Z","iopub.status.idle":"2022-06-01T15:03:54.085331Z","shell.execute_reply.started":"2022-06-01T15:03:54.077394Z","shell.execute_reply":"2022-06-01T15:03:54.084603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Plotting results","metadata":{}},{"cell_type":"code","source":"#Plotting the graph between actual price vs predicted values\nfig = plt.figure()\nplt.scatter(Y_test, y_prediction)\nfig.suptitle('y_test vs y_prediction', fontsize = 20) # Plot heading \nplt.xlabel('y_test', fontsize = 16) # X-label\nplt.ylabel('y_pred', fontsize = 16)  # Y-Label","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:03:57.87154Z","iopub.execute_input":"2022-06-01T15:03:57.871966Z","iopub.status.idle":"2022-06-01T15:03:58.105814Z","shell.execute_reply.started":"2022-06-01T15:03:57.871931Z","shell.execute_reply":"2022-06-01T15:03:58.104585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Plotting the regression line\nsns.regplot(x=Y_test,y=y_prediction,ci=None,color ='red')","metadata":{"execution":{"iopub.status.busy":"2022-06-01T15:03:59.063446Z","iopub.execute_input":"2022-06-01T15:03:59.063865Z","iopub.status.idle":"2022-06-01T15:03:59.29285Z","shell.execute_reply.started":"2022-06-01T15:03:59.063832Z","shell.execute_reply":"2022-06-01T15:03:59.29205Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Result\n* The model is built with significant features that helps in predicting the price of a car and the accuracy of the test data set is found to be 82%\n\n* The equation of the best fitted line is: price = -0.2279 + 0.0591symboling + 0.2356carwidth + 0.2606curbweight + 0.5781enginesize + -0.0970stroke + 0.0919compressionratio + 0.1626peakrpm +.2197Company_bmw\n* p-values - p-values for all the coefficients seem to be less than the significance level of 0.05. - meaning that all the predictors are statistically significant.","metadata":{}}]}